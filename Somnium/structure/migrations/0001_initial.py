# Generated by Django 4.1 on 2022-08-20 18:24

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import structure.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdministrativeBody',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Административный орган',
                'verbose_name_plural': 'Административные органы',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='CollegialBody',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Коллегиальный орган',
                'verbose_name_plural': 'Коллегиальные органы',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Director',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500, verbose_name='Название')),
                ('administrative_body', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='structure.administrativebody')),
                ('collegial_body', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='structure.collegialbody')),
            ],
            options={
                'verbose_name': 'Руководитель',
                'verbose_name_plural': 'Руководители',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Организация',
                'verbose_name_plural': 'Организации',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Subdivision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500, verbose_name='Название')),
                ('director', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='directors', to='structure.director')),
            ],
            options={
                'verbose_name': 'Подразделение',
                'verbose_name_plural': 'Подразделения',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500, verbose_name='Название')),
                ('administrative_body', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='structure.administrativebody')),
                ('collegial_body', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='structure.collegialbody')),
                ('subdivision', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='structure.subdivision')),
            ],
            options={
                'verbose_name': 'Должность',
                'verbose_name_plural': 'Должности',
                'ordering': ['title'],
            },
        ),
        migrations.AddField(
            model_name='director',
            name='subdivision',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subdivisions', to='structure.subdivision'),
        ),
        migrations.AddField(
            model_name='collegialbody',
            name='organization',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='organizations', to='structure.organization'),
        ),
        migrations.AddField(
            model_name='administrativebody',
            name='collegial_body',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collegial_bodies', to='structure.collegialbody'),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('userPhoto', models.ImageField(blank=True, null=True, upload_to=structure.models.user_photo_path, verbose_name='Фото пользователя')),
                ('fullname', models.CharField(max_length=500, verbose_name='ФИО')),
                ('user_code', models.CharField(max_length=20, null=True, verbose_name='Код')),
                ('stavka', models.PositiveIntegerField(null=True, verbose_name='Ставка')),
                ('director', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='structure.director')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('position', models.ManyToManyField(blank=True, null=True, to='structure.position')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Сотрудник',
                'verbose_name_plural': 'Сотрудники',
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
